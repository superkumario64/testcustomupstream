{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_id,
  'paragraph--id--' ~ paragraph.id()|clean_id,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_id,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}

{% block paragraph %}
  <section{{ attributes.addClass(classes) }} aria-label="content row">
    {% block content %}
      <div class="component-wrapper">
        <div class="hero-viewport inner-page">
          <div class="hero-container">
            <div id="hero" class="hero">
              <div class="hero-video">
                <div class="hero-video-container">
                  {% set video_url = file_url(content.field_video_mp4[0]['#media'].field_media_video_file.entity.uri.value) %}
                  <video controls autoplay muted loop class="full-video">
                    <source src="{{ video_url }}">
                  </video>
{#                  <iframe src="{{ video_url }}" autoplay="1" loop="1" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen>#}
{#                  </iframe>#}
{#                  <div id="muteYouTubeVideoPlayer"></div>#}
                </div>
              </div>
              {% set image_url = file_url(content.field_image[0]['#media'].field_media_image.entity.uri.value) %}
              {% set img_alt = content.field_image[0]['#media'].field_media_image.alt %}
              <img src="{{ image_url }}" alt="{{ image_alt }}">
            </div>
          </div>
          <div class="container_top__full-image">
            <div class="header-wrapper content-centered">
              <h1 class="white-text">{{ content.field_title.0['#context'].value }}</h1>
            </div>
            <div class="hero-caption wow">
              <h3 class="secondary-blue-text">{{ content.field_subtitle.0['#context'].value }}</h3>
              <p>{{ content.field_body_formatted.0['#text']|striptags }}</p>
              <a href="{{ content.field_link.0['#url'] }}" class="button primary">{{ content.field_link.0['#title'] }}</a>
            </div>
          </div>
        </div>


{#        <script type="text/javascript" id="www-widgetapi-script"#}
{#                src="https://s.ytimg.com/yts/jsbin/www-widgetapi-vflCEemZ_/www-widgetapi.js" async=""></script>#}
{#        <script async="" src="https://www.youtube.com/iframe_api"></script>#}

{#        <script>#}
{#          function onYouTubeIframeAPIReady() {#}
{#            var player;#}
{#            player = new YT.Player('muteYouTubeVideoPlayer', {#}
{#              videoId: 'mHvCQSGanJg', // YouTube Video ID#}
{#              playerVars: {#}
{#                autoplay: 1, // Auto-play the video on load#}
{#                controls: 0, // Show pause/play buttons in player#}
{#                showinfo: 0, // Hide the video title#}
{#                modestbranding: 1, // Hide the Youtube Logo#}
{#                loop: 1, // Run the video in a loop#}
{#                fs: 0, // Hide the full screen button#}
{#                cc_load_policy: 0, // Hide closed captions#}
{#                iv_load_policy: 3, // Hide the Video Annotations#}
{#                autohide: 0, // Hide video controls when playing#}
{#                rel: 0#}
{#              },#}
{#              events: {#}
{#                onReady: function (e) {#}
{#                  e.target.mute();#}
{#                  $("#muteYouTubeVideoPlayer").removeAttr("height").removeAttr("width");#}
{#                }#}
{#              }#}
{#            });#}

{#          }#}
{#        </script>#}


      </div>
    {% endblock %}
  </section>
{% endblock paragraph %}
