{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_id,
  'paragraph--id--' ~ paragraph.id()|clean_id,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_id,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}

{% block paragraph %}
  <section{{ attributes.addClass(classes) }} aria-label="content row">
    {% block content %}
      <section class="gallery-description" id="gallery-description">
        <div class="grid-container large">
          <h1>{{ content.field_title.0["#context"].value }}</h1>
          {% if content.field_node_ref.0["#node"].field_caption_formatted.0.value|length %}
            <p>{{ content.field_node_ref.0["#node"].field_caption_formatted.0.value|striptags }}</p>
          {% endif %}
        </div>
      </section>
      <div class="image-gallery-carousel owl-carousel" id="lightgallery">
        {% for img_url_arr in img_ref_url_arr %}
          <div class="{{ img_url_arr.class }} carousel-item">
            {% for img_url in img_url_arr.image %}
              <div class="gallery-image" style="background-image: url({{ img_url }})">
                <a class="lightgallery-item" data-src="{{ img_url }}" href="{{ img_url }}"></a>
              </div>
            {% endfor %}
          </div>
        {% endfor %}
      </div>
    {% endblock %}
  </section>
{% endblock paragraph %}
